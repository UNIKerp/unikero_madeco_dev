<?xml version="1.0" encoding="utf-8"?>
<odoo>
	<data noupdate="0">
		<record id="db_postgresql_to" model="apik.etl.destination.ss_type">
			<field name="name">PostgreSQL (To)</field>
			<field name="ttype">DB</field>
			<field name="template"><![CDATA[import psycopg2
connection_${fields['name']} = psycopg2.connect('dbname=${fields['db_base']} user=${fields['db_user']} password=${fields['db_password']} host=${fields['db_host']} port=${fields['db_port']}')
etl.todb(${fields['name']},connection_${fields['name']}, "${fields['db_table']}")
			]]></field>
			<field name="fields_name">name,db_base,db_user,db_password,db_table,db_host,db_port</field>
		</record>
		<record id="db_postgresql_append" model="apik.etl.destination.ss_type">
			<field name="name">PostgreSQL (Append)</field>
			<field name="ttype">DB</field>
			<field name="template"><![CDATA[import psycopg2
connection_${fields['name']} = psycopg2.connect('dbname=${fields['db_base']} user=${fields['db_user']} password=${fields['db_password']} host=${fields['db_host']} port=${fields['db_port']}')
etl.appenddb(${fields['name']},connection_${fields['name']}, "${fields['db_table']}")
			]]></field>
			<field name="fields_name">name,db_base,db_user,db_password,db_table,db_host,db_port</field>
		</record>
		
		<record id="db_mysql_to" model="apik.etl.destination.ss_type">
			<field name="name">MySQL (To)</field>
			<field name="ttype">DB</field>
			<field name="template"><![CDATA[import pymysql
connection_${fields['name']} = pymysql.connect(database=${fields['db_base']},user=${fields['db_user']},password=${fields['db_password']},host=${fields['db_host']},port=${fields['db_port']})
etl.todb(${fields['name']},connection_${fields['name']}, "${fields['db_table']}")
			]]></field>
			<field name="fields_name">name,db_base,db_user,db_password,db_table,db_host,db_port</field>
		</record>
		
		<record id="db_mysql_append" model="apik.etl.destination.ss_type">
			<field name="name">MySQL (Append)</field>
			<field name="ttype">DB</field>
			<field name="template"><![CDATA[import pymysql
connection_${fields['name']} = pymysql.connect(database=${fields['db_base']},user=${fields['db_user']},password=${fields['db_password']},host=${fields['db_host']},port=${fields['db_port']})
etl.appenddb(${fields['name']},connection_${fields['name']}, "${fields['db_table']}")
			]]></field>
			<field name="fields_name">name,db_base,db_user,db_password,db_table,db_host,db_port</field>
		</record>
		
		<record id="manuel" model="apik.etl.destination.ss_type">
			<field name="name">Manuel</field>
			<field name="ttype">Manuel</field>
		</record>
		
		<record id="file_csv" model="apik.etl.destination.ss_type">
			<field name="name">CSV</field>
			<field name="ttype">File</field>
			<field name="template"><![CDATA[etl.tocsv(${fields['name']},"${fields['file_name']}",encoding="${fields['file_encoding']}",write_header=${fields['file_header']},delimiter="${fields['file_delimiter']}")
			]]></field>
			<field name="fields_name">name,file_name,file_encoding,file_header,file_delimiter</field>
		</record>
		
		<record id="mail_mail" model="apik.etl.destination.ss_type">
			<field name="name">Mail</field>
			<field name="ttype">Mail</field>
			<field name="template"><![CDATA[
			template_id = self.env.ref('poultry_kyriba.mail_template_poultry_interface_kyriba').id #ID du template de mail que tu veux utiliser
			mail_template_obj = self.env['mail.template'].browse(template_id)
			mail_template_obj.attachment_ids = [(6,0,attachments)]
			mail_template_obj.send_mail(paiement.id,force_send=True)
			]]></field>
			<field name="fields_name">name,file_name,mail_email,mail_model_mail</field>
		</record>
		
	</data>
</odoo>